<?xml version="1.0" encoding="utf-8"?>
<!--AppLovin plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<trace enable="true"/>
	<init>
		<log text="AppLovin init"/>		
	</init>
	
	<androidManifestUpdates>
    <addElements tag="application">
      <!--<meta-data android:name="applovin.sdk.key"
       android:value= ""/> Replace with your SDK key-->
      
      <activity android:name="com.applovin.adview.AppLovinInterstitialActivity" />
	    <activity android:name="com.applovin.adview.AppLovinConfirmationActivity" />
  
    </addElements>
	
	<!-- Read SDK ID from plugin project settings and add to the manifest -->
    <setStringFromProperty result="SdkId" ini="Engine" section="/Script/AppLovin.AppLovinSettings" property="SdkId" default=""/>
    <setElement result="SdkIdMetadata" value="meta-data"/>
    <addAttribute tag="$SdkIdMetadata" name="android:name" value="applovin.sdk.key"/>
    <addAttribute tag="$SdkIdMetadata" name="android:value" value="$S(SdkId)"/>
    <addElement tag="application" name="SdkIdMetadata"/>

</androidManifestUpdates>
	


	<!-- optional additions to proguard -->
	<proguardAdditions>
		<insert>
<!-- -keep class com.oculus.** {
   *;
}
-keep class android.app.** {
   *;
} -->

-dontwarn com.applovin.**
-libraryjars libs/applovin-sdk-6.3.2.jar
-keep class com.applovin.** { *; }

-keep class com.google.android.gms.ads.identifier.** { *; }
		</insert>
	</proguardAdditions>

	<!-- optional files or directories to copy to Intermediate/Android/APK -->
 	<resourceCopies>		
		<copyFile src="$S(PluginDir)/../../lib/Android/applovin-sdk-6.3.2.jar" dst="$S(BuildDir)/libs/applovin-sdk-6.3.2.jar" />
<!--		<isArch arch="armeabi-v7a">
			<copyFile src="$S(EngineDir)/Source/ThirdParty/Oculus/LibOVRMobile/LibOVRMobile_062/VrApi/Libs/Android/armeabi-v7a/libvrapi.so"
						dst="$S(BuildDir)/libs/armeabi-v7a/libvrapi.so" />
		</isArch>
		<copyFile src="$S(EngineDir)/Source/ThirdParty/Oculus/LibOVRMobile/LibOVRMobile_062/VrApi/Libs/Android/VrApi.jar"
					dst="$S(BuildDir)/libs/VrApi.jar" />
		<copyFile src="$S(EngineDir)/Source/ThirdParty/Oculus/LibOVRMobile/LibOVRMobile_062/1stParty/VrPlatform/libs/vrplatlib.jar"
					dst="$S(BuildDir)/libs/vrplatlib.jar" />
		<if condition="bRemoveOSIG">
			<true>
				<deleteFiles filespec="assets/oculussig_*" />
			</true>
		</if>-->
	</resourceCopies>
	
		<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>
        import com.applovin.adview.AppLovinIncentivizedInterstitial;
		import com.applovin.sdk.AppLovinAd;
		import com.applovin.sdk.AppLovinAdClickListener;
		import com.applovin.sdk.AppLovinAdDisplayListener;
		import com.applovin.sdk.AppLovinAdLoadListener;
		import com.applovin.sdk.AppLovinAdRewardListener;
		import com.applovin.sdk.AppLovinAdVideoPlaybackListener;
		import com.applovin.sdk.AppLovinErrorCodes;
		import com.applovin.sdk.AppLovinSdk;	
	</insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>

      //private boolean bAppLovinAvailability = false;

      private AppLovinIncentivizedInterstitial incentivizedInterstitial;
      //final AppLovinSdk sdk = AppLovinSdk.getInstance(getApplicationContext());
      //AppLovinIncentivizedInterstitial myIncent = AppLovinIncentivizedInterstitial.create(this);


      //Load Listener
      AppLovinAdLoadListener AppLovinAdLoadlistener = new AppLovinAdLoadListener() {
      @Override
      public void adReceived(AppLovinAd appLovinAd) {
      nativeAppLovinadReceived();
      //bAppLovinAvailability = true;
      //Log.debug("AppLovin.adReceived");

      }

      @Override
      public void failedToReceiveAd(int errorCode) {
      //log("Rewarded video failed to load with error code " + errorCode);
      nativeAppLovinfailedToReceiveAd();
      }
      };


      // Reward Listener
      AppLovinAdRewardListener AppLovinAdRewardlistener = new AppLovinAdRewardListener()
      {
      @Override
      public void userRewardVerified(AppLovinAd appLovinAd, Map map) {
      // AppLovin servers validated the reward. Refresh user balance from your server.  We will also pass the number of coins
      // awarded and the name of the currency.  However, ideally, you should verify this with your server before granting it.

      // i.e. - "Coins", "Gold", whatever you set in the dashboard.
      String currencyName = (String) map.get("currency");

      // For example, "5" or "5.00" if you've specified an amount in the UI.
      String amountGivenString = (String) map.get("amount");

      nativeAppLovinuserRewardVerified();


      }

      @Override
      public void userOverQuota(AppLovinAd appLovinAd, Map map) {
      // Your user has already earned the max amount you allowed for the day at this point, so
      // don't give them any more money. By default we'll show them a alert explaining this,
      // though you can change that from the AppLovin dashboard.
      }

      @Override
      public void userRewardRejected(AppLovinAd appLovinAd, Map map) {
      // Your user couldn't be granted a reward for this view. This could happen if you've blacklisted
      // them, for example. Don't grant them any currency. By default we'll show them an alert explaining this,
      // though you can change that from the AppLovin dashboard.
      }

      @Override
      public void validationRequestFailed(AppLovinAd appLovinAd, int responseCode) {
      if (responseCode == AppLovinErrorCodes.INCENTIVIZED_USER_CLOSED_VIDEO) {
      // Your user exited the video prematurely. It's up to you if you'd still like to grant
      // a reward in this case. Most developers choose not to. Note that this case can occur
      // after a reward was initially granted (since reward validation happens as soon as a
      // video is launched).
      } else if (responseCode == AppLovinErrorCodes.INCENTIVIZED_SERVER_TIMEOUT || responseCode == AppLovinErrorCodes.INCENTIVIZED_UNKNOWN_SERVER_ERROR) {
      // Some server issue happened here. Don't grant a reward. By default we'll show the user
      // a alert telling them to try again later, but you can change this in the
      // AppLovin dashboard.
      } else if (responseCode == AppLovinErrorCodes.INCENTIVIZED_NO_AD_PRELOADED) {
      // Indicates that the developer called for a rewarded video before one was available.
      // Note: This code is only possible when working with rewarded videos.
      }
      }

      @Override
      public void userDeclinedToViewAd(AppLovinAd appLovinAd) {
      // This method will be invoked if the user selected "no" when asked if they want to view an ad.
      // If you've disabled the pre-video prompt in the "Manage Apps" UI on our website, then this method won't be called.
      }

      };

      // Video Playback Listener
      AppLovinAdVideoPlaybackListener AppLovinAdVideoPlaybacklistener = new AppLovinAdVideoPlaybackListener() {
      @Override
      public void videoPlaybackBegan(AppLovinAd appLovinAd) {
      //log("Video Started");
      }

      @Override
      public void videoPlaybackEnded(AppLovinAd appLovinAd, double v, boolean b) {
      //log("Video Ended");
      }

      };

      // Ad Dispaly Listener
      AppLovinAdDisplayListener adDisplayListener = new AppLovinAdDisplayListener()
      {
      @Override
      public void adDisplayed(AppLovinAd appLovinAd) {
      //log("Ad Displayed");
      }

      @Override
      public void adHidden(AppLovinAd appLovinAd) {
      nativeAppLovinadHidden();

      //log("Ad Dismissed");
      }
      };

      // Ad Click Listener
      AppLovinAdClickListener AppLovinAdClicklistener = new AppLovinAdClickListener()
      {
      @Override
      public void adClicked(AppLovinAd appLovinAd) {
      //log("Ad Click");
      }
      };

      public native void nativeAppLovinadReceived();

      public native void nativeAppLovinuserRewardVerified();

      public native void nativeAppLovinfailedToReceiveAd();

      public native void nativeAppLovinadHidden();


      public void AndroidThunkJava_AppLovin_PreloadRewardedVideo()
      {
      incentivizedInterstitial.preload(AppLovinAdLoadlistener);

      }




      public boolean AndroidThunkJava_AppLovin_HasRewardedVideo()
      {
      return incentivizedInterstitial.isAdReadyToDisplay();

      //return bAppLovinAvailability;

      }

      public void AndroidThunkJava_AppLovin_ShowRewardedVideo()
      {
      //Log.debug( "AndroidThunkJava_AppLovin_ShowCRewardedVideo()" );
      if(incentivizedInterstitial.isAdReadyToDisplay()){
      // An ad is ready.  Display the ad with one of the available show methods.
      incentivizedInterstitial.show(this, AppLovinAdRewardlistener, AppLovinAdVideoPlaybacklistener, adDisplayListener, AppLovinAdClicklistener);
      }

      //bAppLovinAvailability =false;
      }








    </insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
		<insert>		

		</insert>
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
    <insert>
      final AppLovinSdk sdk = AppLovinSdk.getInstance(getApplicationContext());
      //AppLovinSdk.initializeSdk(getApplicationContext());
      AppLovinSdk.initializeSdk(this);
      //Log.debug("AppLovinSdk.initializeSdk");

      incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(this);
    </insert>
   

  </gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
		<insert>
		
		</insert>
	</gameActivityOnPauseAdditions>


	<!-- optional additions to GameActivity onResume in GameActivity.java	-->
	<gameActivityOnResumeAdditions>
		<insert>
		
		</insert>
	</gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
	</gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
		<!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
	<!-- 	<if condition="bSupported">
			<true>
				<loadLibrary name="vrapi" failmsg="GearVR library not loaded and required!" />
			</true>
		</if> -->
	</soLoadLibrary>

</root>
